DROP ALL OBJECTS DELETE FILES;
create table IF NOT EXISTS PUBLIC.MPAS
(
    MPAS_ID   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    MPAS_NAME CHARACTER VARYING(10) CHECK (MPAS_NAME <> '') not null UNIQUE
);

create table IF NOT EXISTS PUBLIC.GENRES
(
    GENRE_ID   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    GENRE_NAME CHARACTER VARYING(50)  CHECK (GENRE_NAME <>'') NOT NULL UNIQUE
);

create table IF NOT EXISTS PUBLIC.FILMS
(
    FILM_ID          INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FILM_NAME        CHARACTER VARYING(100) CHECK (FILM_NAME <> '') not null,
    FILM_DESCRIPTION CHARACTER VARYING(255),
    RELEASE_DATE     DATE NOT NULL,
    FILM_DURATION    INTEGER CHECK (FILM_DURATION > 0) NOT NULL,
    FILM_GENRE_ID    INTEGER    REFERENCES GENRES (GENRE_ID) ON DELETE SET NULL,
    MPA_ID           INTEGER    REFERENCES MPAS (MPAS_ID) ON DELETE SET NULL
);

create table IF NOT EXISTS PUBLIC.USERS
(
    USER_ID  INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    LOGIN    CHARACTER VARYING(50)  CHECK (LOGIN <> '') NOT NULL UNIQUE,
    NAME     CHARACTER VARYING(50),
    EMAIL    CHARACTER VARYING(100) NOT NULL UNIQUE,
    BIRTHDAY DATE
);

create table IF NOT EXISTS PUBLIC.FRIENDS
(
    FROM_USER   INTEGER    REFERENCES USERS (USER_ID) ON DELETE CASCADE,
    TO_USER     INTEGER    REFERENCES USERS (USER_ID) ON DELETE CASCADE,
    STATUS    CHARACTER VARYING(20) DEFAULT 'waiting',
    PRIMARY KEY (FROM_USER, TO_USER)
);

create table IF NOT EXISTS PUBLIC.LIKES
(
    USER_ID INTEGER REFERENCES USERS (USER_ID) ON DELETE CASCADE,
    FILM_ID INTEGER REFERENCES FILMS (FILM_ID) ON DELETE CASCADE,
    PRIMARY KEY (USER_ID, FILM_ID)
);

CREATE TABLE IF NOT EXISTS PUBLIC.FILMS_GENRES
(
    FILM_ID  INTEGER REFERENCES FILMS (FILM_ID) ON DELETE CASCADE,
    GENRE_ID INTEGER REFERENCES GENRES (GENRE_ID) ON DELETE CASCADE,
    PRIMARY KEY (FILM_ID, GENRE_ID)
);